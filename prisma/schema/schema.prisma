// Prisma schema for Bondi Dating App

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - Authentication and account data
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified Boolean   @default(false)
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  profile        Profile?
  files          File[]
  likesGiven     Like[]    @relation("LikesGiven")
  likesReceived  Like[]    @relation("LikesReceived")
  matchesAsUser1 Match[]   @relation("MatchUser1")
  matchesAsUser2 Match[]   @relation("MatchUser2")
  messagesSent   Message[]
  sessions       Session[]
  accounts       Account[]
  notifications  Notification[]

  @@index([email])
}

// Session model - Better Auth session management
model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Account model - Better Auth account/password management
model Account {
  id                String   @id @default(cuid())
  userId            String
  accountId         String
  providerId        String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  expiresAt         DateTime?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
}

// Profile model - User profile information
model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String
  age       Int
  bio       String   @db.Text
  gender    Gender
  location  String?
  interests String[] // (e.g., ["Music", "Travel", "Cooking"])
  hobbies   String[] // (e.g., ["Reading", "Hiking", "Gaming"])

  // Preferences
  lookingFor       String?
  relationshipType RelationshipType @default(CASUAL)
  genderPreference GenderPreference @default(EVERYONE)

  // Privacy Settings
  showOnlineStatus Boolean  @default(true)
  showDistance     Boolean  @default(true)

  // Geolocation
  latitude           Float?
  longitude          Float?
  lastLocationUpdate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([age])
  @@index([gender])
  @@index([genderPreference])
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  OTHER
}

enum RelationshipType {
  CASUAL
  SERIOUS
  FRIENDSHIP
  NOT_SURE
}

enum GenderPreference {
  MALE
  FEMALE
  EVERYONE
}
